"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[5497],{3905:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return f}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=n.createContext({}),c=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},s=function(e){var t=c(e.components);return n.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=c(r),f=a,d=m["".concat(u,".").concat(f)]||m[f]||p[f]||i;return r?n.createElement(d,o(o({ref:t},s),{},{components:r})):n.createElement(d,o({ref:t},s))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=m;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},848:function(e,t,r){r.r(t),r.d(t,{assets:function(){return s},contentTitle:function(){return u},default:function(){return f},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return p}});var n=r(3117),a=r(102),i=(r(7294),r(3905)),o=["components"],l={},u="TrueNAS SCALE Chart Structure",c={unversionedId:"manual/development/chart-structure",id:"manual/development/chart-structure",title:"TrueNAS SCALE Chart Structure",description:"This is a general synopsis about the structure of a SCALE App and/or Helm Chart, it does not directly reflect TrueCharts specific settings.",source:"@site/docs/manual/development/chart-structure.md",sourceDirName:"manual/development",slug:"/manual/development/chart-structure",permalink:"/docs/manual/development/chart-structure",draft:!1,editUrl:"https://github.com/truecharts/pub/docs/manual/development/chart-structure.md",tags:[],version:"current",frontMatter:{},sidebar:"manualSidebar",previous:{title:"License Header Format",permalink:"/docs/manual/development/License-headers"},next:{title:"Chart.yaml layout",permalink:"/docs/manual/development/chart-yaml-structure"}},s={},p=[],m={toc:p};function f(e){var t=e.components,r=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"truenas-scale-chart-structure"},"TrueNAS SCALE Chart Structure"),(0,i.kt)("p",null,"This is a general synopsis about the structure of a SCALE App and/or Helm Chart, it does not directly reflect TrueCharts specific settings."),(0,i.kt)("p",null,'The following files are generally considered to be a "normal" Helm chart:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"charts/<train>/<chart name>/\n  charts/                  # Directory containing dependency charts\n  Chart.yaml               # Required Helm chart information file\n  README.md                # Optional: Helm Readme file (will be rendered in TrueNAS SCALE UI as well)\n  templates/               # A directory of templates that, when combined with values.yml will generate K8s YAML\n  values.yaml              # The default configuration values for this chart\n")),(0,i.kt)("p",null,"The following files are specific for TrueNAS SCALE:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"charts/<train>/<chart name>/SCALE/\n  app-readme.md            # TrueNAS SCALE Specific: Readme file for display in TrueNAS SCALE UI, automatically generated\n  questions.yaml           # TrueNAS SCALE Specific: File containing questions for TrueNAS SCALE UI\n  ix_values.yaml           # Hidden configuration values when installing using TrueNAS SCALE\n  item.yaml                # Contains generic information about the App for the TrueNAS SCALE UI\n")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"See the upstream Helm chart ",(0,i.kt)("a",{parentName:"em",href:"https://helm.sh/docs/chart_template_guide/"},"developer reference")," for a complete walk through of developing charts.")),(0,i.kt)("p",null,"To convert an upstream chart to take advantage of TrueNAS SCALE enhanced UX, first create an ",(0,i.kt)("inlineCode",{parentName:"p"},"item.yaml")," file.\nThis file among other catalog item information provides a list of categories that this chart fits into. This helps users navigate and filtering when browsing the catalog UI."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'$ cat charts/<train>/<chart name>/SCALE/item.yaml\ncategories:\n  - generic\nicon_url: "http://ix_url"\n')),(0,i.kt)("p",null,"Then add a ",(0,i.kt)("inlineCode",{parentName:"p"},"questions.yaml")," file to prompt the user for something."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'groups:\n  - name: "Container Images"\n    description: "Image to be used for container"\nquestions:\n  - variable: image\n    description: "Docker Image Details"\n    group: "Container Images"\n    schema:\n      type: dict\n      required: true\n      attrs:\n        - variable: repository\n          description: "Docker image repository"\n          label: "Image repository"\n          schema:\n            type: string\n            required: true\n        - variable: tag\n          description: "Tag to use for specified image"\n          label: "Image Tag"\n          schema:\n            type: string\n            default: "latest"\n        - variable: pullPolicy\n          description: "Docker Image Pull Policy"\n          label: "Image Pull Policy"\n          schema:\n            type: string\n            default: "IfNotPresent"\n            enum:\n              - value: "IfNotPresent"\n                description: "Only pull image if not present on host"\n              - value: "Always"\n                description: "Always pull image even if present on host"\n              - value: "Never"\n                description: "Never pull image even if it\'s not present on host"\n')),(0,i.kt)("p",null,"The above will prompt the user with 2 text fields and a dropdown in the UI getting details for image configuration in a helm chart.\n",(0,i.kt)("em",{parentName:"p"},"More information about questions.yaml is available ",(0,i.kt)("a",{parentName:"em",href:"https://wiki.truecharts.org/development/questions-yaml/"},"here"))))}f.isMDXComponent=!0}}]);